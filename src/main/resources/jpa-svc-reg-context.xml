<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
  
  
    <description>SpringJpa配置</description>  
        <!-- 启动spring的注解功能 -->  
    <context:component-scan base-package="cn.com.gzqixun.cas"><!-- base-package 如果多个，用“,”分隔 -->  
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
    </context:component-scan>  
    
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" 
			location="classpath:base.properties" />    
      
    <!-- Hibernate对Jpa的实现 即配置JPA的厂商类-->  
<!--     <bean id="hibernateJpaVendorAdapter"  
        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" /> -->  
            <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
        <property name="generateDdl" value="false"/>  
        <property name="database" value="MYSQL"/>  
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>  
        <property name="showSql" value="true"/>  
    </bean>  
      
    <!-- 配置  Jpa 事务管理器 -->  
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
        <property name="entityManagerFactory" ref="entityManagerFactory" />  
    </bean>  
    <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="save*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="insert*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="add*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="update*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="delete*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="remove*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="*" propagation="REQUIRED"/>  
        </tx:attributes>  
    </tx:advice>  --> 
        <!-- 缓存配置 -->  
    <!-- <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:${ehcache.configFile}" />  
    </bean> -->  
      
    <!-- 配置entityManagerFactory -->  
    <bean id="entityManagerFactory"  
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
        <!-- 指定数据源 -->  
        <property name="dataSource" ref="dataSource" />  
        <!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->  
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />  
        <!-- 指定Entity实体类包路径 -->  
        <property name="packagesToScan" value="cn.com.gzqixun.cas.entity"/>  
        <!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->  
        <property name="jpaDialect">  
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>  
        </property>  
        <property name="jpaProperties">  
            <props>  
                <prop key="hibernate.show_sql">true</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                <prop key="hibernate.jdbc.batch_size">1</prop>
            </props>  
        </property>  
    </bean>  
      
    <!-- 数据源配置,使用应用内的druid数据库连接池 -->  
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">   
            <property name="driverClass"><value>com.mysql.jdbc.Driver</value></property>    
			<property name="jdbcUrl"><value>jdbc:mysql://127.0.0.1:3306/cas?useUnicode=true&amp;characterEncoding=utf-8</value></property>
			<property name="user"><value>root</value></property>    
			<property name="password"><value></value></property>    
		  	<!--连接池中保留的最小连接数。-->
		  	<property name="minPoolSize" value="10" />
		  	<!--连接池中保留的最大连接数。Default: 15 -->
		  	<property name="maxPoolSize" value="100" />
		  	<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		  	<property name="maxIdleTime" value="1800" />
		  	<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		  	<property name="acquireIncrement" value="3" />
		  	<property name="maxStatements" value="1000" />
		  	<property name="initialPoolSize" value="10" />
		  	<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		  	<property name="idleConnectionTestPeriod" value="60" />
		  	<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		  	<property name="acquireRetryAttempts" value="30" />
		  	<property name="breakAfterAcquireFailure" value="true" />
		  	<property name="testConnectionOnCheckout" value="false" />   
        </bean>  
      
      
    <!-- 开启扫描 -->  
    <!-- 如果spring用了jpa，并且类型为LocalContainerEntityManagerFactoryBean，则组件注册在此配置文件出现即可，其余配置文件可忽略   
        使用component来替代annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入\   
    <context:component-scan base-package="com.spring.jpa" />-->  
        <!-- 重要配置：启用扫描并自动创建代理的功能 -->  
    <!-- <jpa:repositories base-package="cn.com.gzqixun.cas"  
        transaction-manager-ref="transactionManager"  
        entity-manager-factory-ref="entityManagerFactory" /> -->  
          
    <!-- 开启注解事务 -->  
    <tx:annotation-driven transaction-manager="transactionManager"  
        proxy-target-class="true" />  
    <aop:aspectj-autoproxy />  
  
</beans> 